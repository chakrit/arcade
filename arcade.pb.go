// Code generated by protoc-gen-go. DO NOT EDIT.
// source: arcade.proto

/*
Package arcade is a generated protocol buffer package.

It is generated from these files:
	arcade.proto

It has these top-level messages:
	PingPong
	DescribeRequest
	DescribeResponse
*/
package arcade

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NodeType int32

const (
	NodeType_RESERVED NodeType = 0
	NodeType_DUMMY    NodeType = 1
	NodeType_GAME     NodeType = 2
	NodeType_PLAYER   NodeType = 3
	NodeType_DISPLAY  NodeType = 4
)

var NodeType_name = map[int32]string{
	0: "RESERVED",
	1: "DUMMY",
	2: "GAME",
	3: "PLAYER",
	4: "DISPLAY",
}
var NodeType_value = map[string]int32{
	"RESERVED": 0,
	"DUMMY":    1,
	"GAME":     2,
	"PLAYER":   3,
	"DISPLAY":  4,
}

func (x NodeType) String() string {
	return proto.EnumName(NodeType_name, int32(x))
}
func (NodeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PingPong struct {
	SequenceNumber int32 `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
}

func (m *PingPong) Reset()                    { *m = PingPong{} }
func (m *PingPong) String() string            { return proto.CompactTextString(m) }
func (*PingPong) ProtoMessage()               {}
func (*PingPong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingPong) GetSequenceNumber() int32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

type DescribeRequest struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
}

func (m *DescribeRequest) Reset()                    { *m = DescribeRequest{} }
func (m *DescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*DescribeRequest) ProtoMessage()               {}
func (*DescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DescribeRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

type DescribeResponse struct {
	Identifier string   `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	Type       NodeType `protobuf:"varint,2,opt,name=type,enum=arcade.NodeType" json:"type,omitempty"`
}

func (m *DescribeResponse) Reset()                    { *m = DescribeResponse{} }
func (m *DescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*DescribeResponse) ProtoMessage()               {}
func (*DescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DescribeResponse) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *DescribeResponse) GetType() NodeType {
	if m != nil {
		return m.Type
	}
	return NodeType_RESERVED
}

func init() {
	proto.RegisterType((*PingPong)(nil), "arcade.PingPong")
	proto.RegisterType((*DescribeRequest)(nil), "arcade.DescribeRequest")
	proto.RegisterType((*DescribeResponse)(nil), "arcade.DescribeResponse")
	proto.RegisterEnum("arcade.NodeType", NodeType_name, NodeType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NodeService service

type NodeServiceClient interface {
	Ping(ctx context.Context, in *PingPong, opts ...grpc.CallOption) (*PingPong, error)
	Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error)
}

type nodeServiceClient struct {
	cc *grpc.ClientConn
}

func NewNodeServiceClient(cc *grpc.ClientConn) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) Ping(ctx context.Context, in *PingPong, opts ...grpc.CallOption) (*PingPong, error) {
	out := new(PingPong)
	err := grpc.Invoke(ctx, "/arcade.NodeService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error) {
	out := new(DescribeResponse)
	err := grpc.Invoke(ctx, "/arcade.NodeService/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodeService service

type NodeServiceServer interface {
	Ping(context.Context, *PingPong) (*PingPong, error)
	Describe(context.Context, *DescribeRequest) (*DescribeResponse, error)
}

func RegisterNodeServiceServer(s *grpc.Server, srv NodeServiceServer) {
	s.RegisterService(&_NodeService_serviceDesc, srv)
}

func _NodeService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingPong)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arcade.NodeService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Ping(ctx, req.(*PingPong))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arcade.NodeService/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Describe(ctx, req.(*DescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arcade.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _NodeService_Ping_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _NodeService_Describe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "arcade.proto",
}

func init() { proto.RegisterFile("arcade.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x93, 0x9a, 0xc6, 0x74, 0x5a, 0xda, 0x65, 0x2e, 0x86, 0x1e, 0xa4, 0x04, 0xc1, 0x22,
	0x52, 0xb0, 0x7d, 0x00, 0x29, 0x24, 0x8a, 0x60, 0x4a, 0xd8, 0xa8, 0xd8, 0x93, 0x34, 0xc9, 0x58,
	0xf6, 0xe0, 0x26, 0x66, 0x53, 0xa1, 0xe0, 0xc3, 0x4b, 0xd2, 0xae, 0x8a, 0x3d, 0x78, 0x9c, 0xef,
	0xe7, 0xdf, 0x65, 0xbe, 0x81, 0xde, 0xaa, 0x4c, 0x57, 0x19, 0x4d, 0x8a, 0x32, 0xaf, 0x72, 0xb4,
	0x77, 0x93, 0x37, 0x03, 0x27, 0x12, 0x72, 0x1d, 0xe5, 0x72, 0x8d, 0xe7, 0x30, 0x50, 0xf4, 0xbe,
	0x21, 0x99, 0xd2, 0x8b, 0xdc, 0xbc, 0x25, 0x54, 0xba, 0xe6, 0xc8, 0x1c, 0xb7, 0x79, 0x5f, 0xe3,
	0x45, 0x43, 0xbd, 0x2b, 0x18, 0xf8, 0xa4, 0xd2, 0x52, 0x24, 0xc4, 0xeb, 0x44, 0x55, 0x78, 0x0a,
	0x20, 0x32, 0x92, 0x95, 0x78, 0x15, 0xfb, 0x5a, 0x87, 0xff, 0x22, 0xde, 0x33, 0xb0, 0x9f, 0x8a,
	0x2a, 0x72, 0xa9, 0xe8, 0xbf, 0x0e, 0x9e, 0x81, 0x55, 0x6d, 0x0b, 0x72, 0x5b, 0x23, 0x73, 0xdc,
	0x9f, 0xb2, 0xc9, 0x7e, 0x81, 0x45, 0x9e, 0xd1, 0xc3, 0xb6, 0x20, 0xde, 0xa4, 0x17, 0x37, 0xe0,
	0x68, 0x82, 0x3d, 0x70, 0x78, 0x10, 0x07, 0xfc, 0x29, 0xf0, 0x99, 0x81, 0x1d, 0x68, 0xfb, 0x8f,
	0x61, 0xb8, 0x64, 0x26, 0x3a, 0x60, 0xdd, 0xce, 0xc3, 0x80, 0xb5, 0x10, 0xc0, 0x8e, 0xee, 0xe7,
	0xcb, 0x80, 0xb3, 0x23, 0xec, 0xc2, 0xb1, 0x7f, 0x17, 0xd7, 0x23, 0xb3, 0xa6, 0x9f, 0xd0, 0xad,
	0xdf, 0x89, 0xa9, 0xfc, 0x10, 0x29, 0xe1, 0x25, 0x58, 0xb5, 0x18, 0xfc, 0xfe, 0x56, 0x6b, 0x1a,
	0x1e, 0x10, 0xcf, 0xc0, 0x6b, 0x70, 0xf4, 0x7a, 0x78, 0xa2, 0xf3, 0x3f, 0x8e, 0x86, 0xee, 0x61,
	0xb0, 0x33, 0xe1, 0x19, 0x89, 0xdd, 0x9c, 0x65, 0xf6, 0x15, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x3e,
	0x41, 0xa0, 0xa6, 0x01, 0x00, 0x00,
}
